// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentMovie.Infrastructure;

#nullable disable

namespace RentMovie.Infrastructure.Migrations
{
    [DbContext(typeof(RentMovieContext))]
    [Migration("20220426040747_FixCustomerUsername")]
    partial class FixCustomerUsername
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<string>("CastName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CastName", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.Actor", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Name");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Name = "Robert Pattinson"
                        },
                        new
                        {
                            Name = "Zoë Kravitz"
                        },
                        new
                        {
                            Name = "Colin Farrell"
                        },
                        new
                        {
                            Name = "Paul Dano"
                        });
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.Director", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Name");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Name = "Matt Reeves"
                        });
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountAvailable")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DirectorName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("RentCategoryName")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("DirectorName");

                    b.HasIndex("RentCategoryName");

                    b.HasIndex("Id", "Title")
                        .IsUnique();

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("502fd065-5746-433f-869d-d6fac72ceb76"),
                            AmountAvailable = 10,
                            ReleaseYear = 2022,
                            Synopsis = "When the Riddler, a sadistic serial killer, begins murdering key political figures in Gotham, Batman is forced to investigate the city's hidden corruption and question his family's involvement.",
                            Title = "The Batman"
                        });
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.MovieCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Name");

                    b.ToTable("MovieCategories");

                    b.HasData(
                        new
                        {
                            Name = "Action"
                        });
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("ItemsTotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<double>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerUsername");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.RentCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Name");

                    b.ToTable("RentCategories");

                    b.HasData(
                        new
                        {
                            Name = "Release",
                            Price = 5.0
                        });
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "admin-user",
                            Address = "5036 Tierra Locks Suite 158",
                            GivenName = "Admin User",
                            PasswordHash = "$2a$11$OP4YrOqyzfKXHFun//Ojw.AcVmIhooC2OidwiQ6VwYBEwLpFQwxLi",
                            Role = 0,
                            ZipCode = "980395900"
                        },
                        new
                        {
                            Username = "customer-user",
                            Address = "570 Hackett Bridge",
                            GivenName = "Customer User",
                            PasswordHash = "$2a$11$GRjs3DxUWHDrRkFKJqkyo.ywfdlLqCiS57yKVNFPgQOQ6u2bgVIY6",
                            Role = 1,
                            ZipCode = "948019535"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("RentMovie.Application.Domain.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("CastName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentMovie.Application.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.Movie", b =>
                {
                    b.HasOne("RentMovie.Application.Domain.Entities.MovieCategory", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryName");

                    b.HasOne("RentMovie.Application.Domain.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorName");

                    b.HasOne("RentMovie.Application.Domain.Entities.RentCategory", "RentCategory")
                        .WithMany("Movies")
                        .HasForeignKey("RentCategoryName");

                    b.Navigation("Category");

                    b.Navigation("Director");

                    b.Navigation("RentCategory");
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.Order", b =>
                {
                    b.HasOne("RentMovie.Application.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.MovieCategory", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("RentMovie.Application.Domain.Entities.RentCategory", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
